# Docker Compose for Alpine i386 (32-bit) deployment
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile-alpine-i386
      platforms:
        - linux/386
    image: cupcake-vanilla:alpine-i386
    platform: linux/386
    container_name: cupcake_vanilla_alpine_i386
    restart: unless-stopped

    # Reduced resource limits for 32-bit systems
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

    # Environment variables
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://cupcake_user:cupcake_pass@db:5432/cupcake_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ALLOWED_HOSTS=localhost,127.0.0.1,${DOMAIN:-cupcake.local}
      - CORS_ALLOWED_ORIGINS=https://${DOMAIN:-cupcake.local},http://localhost:4200
      - DJANGO_SETTINGS_MODULE=cupcake_vanilla.settings

    # Volumes
    volumes:
      - media_data:/app/media
      - static_data:/app/staticfiles

    # Port mapping
    ports:
      - "8000:8000"

    # Dependencies
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database (use official postgres alpine for i386 compatibility)
  db:
    image: postgres:15-alpine
    platform: linux/386
    container_name: cupcake_vanilla_db_i386
    restart: unless-stopped

    environment:
      POSTGRES_DB: cupcake_db
      POSTGRES_USER: cupcake_user
      POSTGRES_PASSWORD: cupcake_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"

    volumes:
      - postgres_data:/var/lib/postgresql/data

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cupcake_user -d cupcake_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Django Channels (Alpine i386 compatible)
  redis:
    image: redis:7-alpine
    platform: linux/386
    container_name: cupcake_vanilla_redis_i386
    restart: unless-stopped

    # Redis configuration for memory optimization
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru --appendonly yes

    volumes:
      - redis_data:/data

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx reverse proxy (Alpine i386 compatible)
  nginx:
    image: nginx:alpine
    platform: linux/386
    container_name: cupcake_vanilla_nginx_i386
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx-conf/cupcake-vanilla.conf:/etc/nginx/conf.d/default.conf:ro
      - static_data:/app/staticfiles:ro
      - media_data:/app/media:ro
      - ssl_certs:/etc/nginx/ssl:ro

    depends_on:
      - app

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local
  ssl_certs:
    driver: local

networks:
  default:
    name: cupcake_vanilla_network_i386
