# Nginx configuration for ccv.ome.quest with Angular Frontend and Django API
# Production HTTPS + automatic renewal support + Frontend serving

# Upstream Django application (Gunicorn / runserver inside app container)
upstream django_app_ccv {
    server app:8000;
    # Optional: add keepalive if high traffic
    # keepalive 16;
}

# Upstream Angular frontend
upstream frontend_app {
    server frontend:80;
    # keepalive 16;
}

# HTTP server: serves ACME challenges and redirects everything else to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name ccv.ome.quest;

    # ACME challenge location (shared volume mounted at /var/www/certbot)
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    # Optional simple health endpoint (no redirect)
    location = /healthz {
        return 200 'ok';
        add_header Content-Type text/plain;
    }

    # Redirect all other plaintext traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server: primary application endpoint
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name ccv.ome.quest;

    # Let's Encrypt certificate paths (mounted from certbot volume)
    ssl_certificate /etc/letsencrypt/live/ccv.ome.quest/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ccv.ome.quest/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/ccv.ome.quest/chain.pem;

    # SSL configuration
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy strict-origin-when-cross-origin always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Log format (optional override)
    # access_log /var/log/nginx/ccv_access.log;
    # error_log  /var/log/nginx/ccv_error.log warn;

    # Increase max upload size (adjust per needs)
    client_max_body_size 2G;

    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_read_timeout 300;
    proxy_connect_timeout 60;
    proxy_send_timeout 300;

    # Gzip (optional)
    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/xml+rss application/xml application/vnd.ms-fontobject font/ttf font/otf image/svg+xml;
    gzip_min_length 1024;

    # Health check (for load balancers / uptime monitors)
    location = /healthz {
        return 200 'ok';
        add_header Content-Type text/plain;
    }

    # Django API endpoints (highest priority)
    location /api/ {
        proxy_pass http://django_app_ccv;
    }

    # Django admin
    location /admin/ {
        proxy_pass http://django_app_ccv;
    }

    # Static files (served by Django with WhiteNoise)
    location /static/ {
        proxy_pass http://django_app_ccv;
    }

    # Media files (mounted volume)
    location /media/ {
        alias /media/;  # /media mounted via volume
        expires 7d;
        add_header Cache-Control "public";
    }

    # WebSocket endpoints (Django Channels)
    location /ws/ {
        proxy_pass http://django_app_ccv;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }

    # Health check endpoint for Django
    location /health/ {
        proxy_pass http://django_app_ccv;
    }

    # Frontend health check
    location = /frontend-health {
        proxy_pass http://frontend_app/health;
    }

    # Angular Frontend (catch-all - must be last)
    location / {
        proxy_pass http://frontend_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Handle Angular routing (SPA) - fallback to index.html for 404s
        proxy_intercept_errors on;
        error_page 404 = @fallback;
    }

    # Fallback location for Angular routing
    location @fallback {
        proxy_pass http://frontend_app;
    }
}
