# Generated by Django 5.2.6 on 2025-09-05 12:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("ccc", "0001_initial"),
        ("ccm", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalProject",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("project_name", models.CharField(max_length=255)),
                ("project_description", models.TextField(blank=True, null=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "is_vaulted",
                    models.BooleanField(
                        default=False,
                        help_text="True if this project is in a user's import vault",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.remotehost",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical project",
                "verbose_name_plural": "historical projects",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProtocolModel",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("protocol_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "protocol_created_on",
                    models.DateTimeField(blank=True, editable=False),
                ),
                ("protocol_doi", models.TextField(blank=True, null=True)),
                ("protocol_title", models.TextField()),
                ("protocol_url", models.TextField(blank=True, null=True)),
                ("protocol_version_uri", models.TextField(blank=True, null=True)),
                ("protocol_description", models.TextField(blank=True, null=True)),
                ("enabled", models.BooleanField(default=False)),
                ("model_hash", models.TextField(blank=True, null=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "is_vaulted",
                    models.BooleanField(
                        default=False,
                        help_text="True if this protocol is in a user's import vault",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.remotehost",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical protocol model",
                "verbose_name_plural": "historical protocol models",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSession",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("unique_id", models.UUIDField(db_index=True)),
                ("enabled", models.BooleanField(default=False)),
                ("name", models.TextField(blank=True, null=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("processing", models.BooleanField(default=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.remotehost",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical session",
                "verbose_name_plural": "historical sessions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ProtocolModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("protocol_id", models.BigIntegerField(blank=True, null=True)),
                ("protocol_created_on", models.DateTimeField(auto_now=True)),
                ("protocol_doi", models.TextField(blank=True, null=True)),
                ("protocol_title", models.TextField()),
                ("protocol_url", models.TextField(blank=True, null=True)),
                ("protocol_version_uri", models.TextField(blank=True, null=True)),
                ("protocol_description", models.TextField(blank=True, null=True)),
                ("enabled", models.BooleanField(default=False)),
                ("model_hash", models.TextField(blank=True, null=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "is_vaulted",
                    models.BooleanField(
                        default=False,
                        help_text="True if this protocol is in a user's import vault",
                    ),
                ),
                (
                    "editors",
                    models.ManyToManyField(
                        blank=True,
                        related_name="editor_protocols",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_resources",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="protocols",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "viewers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="viewer_protocols",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalProtocolSection",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("section_description", models.TextField(blank=True, null=True)),
                ("section_duration", models.IntegerField(blank=True, null=True)),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Position of section in protocol for efficient ordering",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "protocol",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolmodel",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical protocol section",
                "verbose_name_plural": "historical protocol sections",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProtocolReagent",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("quantity", models.FloatField()),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reagent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccm.reagent",
                    ),
                ),
                (
                    "protocol",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolmodel",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical protocol reagent",
                "verbose_name_plural": "historical protocol reagents",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProtocolRating",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("complexity_rating", models.IntegerField(default=0)),
                ("duration_rating", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "protocol",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolmodel",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical protocol rating",
                "verbose_name_plural": "historical protocol ratings",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ProtocolReagent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.FloatField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "protocol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="protocol_reagents",
                        to="ccrv.protocolmodel",
                    ),
                ),
                (
                    "reagent",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="ccm.reagent"),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ProtocolSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("section_description", models.TextField(blank=True, null=True)),
                ("section_duration", models.IntegerField(blank=True, null=True)),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Position of section in protocol for efficient ordering",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "protocol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sections",
                        to="ccrv.protocolmodel",
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="protocol_sections",
                        to="ccc.remotehost",
                    ),
                ),
            ],
            options={
                "ordering": ["order", "id"],
            },
        ),
        migrations.CreateModel(
            name="ProtocolStep",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("step_id", models.BigIntegerField(blank=True, null=True)),
                ("step_description", models.TextField()),
                ("step_duration", models.IntegerField(blank=True, null=True)),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Position of step in section/protocol for efficient ordering",
                    ),
                ),
                ("original", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "branch_from",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="branch_steps",
                        to="ccrv.protocolstep",
                    ),
                ),
                (
                    "previous_step",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="next_step",
                        to="ccrv.protocolstep",
                    ),
                ),
                (
                    "protocol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="steps",
                        to="ccrv.protocolmodel",
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="protocol_steps",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "step_section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="steps",
                        to="ccrv.protocolsection",
                    ),
                ),
            ],
            options={
                "ordering": ["order", "id"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalStepVariation",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("variation_description", models.TextField()),
                ("variation_duration", models.IntegerField()),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolstep",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical step variation",
                "verbose_name_plural": "historical step variations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalStepReagent",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("quantity", models.FloatField()),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("scalable", models.BooleanField(default=False)),
                ("scalable_factor", models.FloatField(default=1.0)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reagent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccm.reagent",
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolstep",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical step reagent",
                "verbose_name_plural": "historical step reagents",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProtocolStep",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("step_id", models.BigIntegerField(blank=True, null=True)),
                ("step_description", models.TextField()),
                ("step_duration", models.IntegerField(blank=True, null=True)),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Position of step in section/protocol for efficient ordering",
                    ),
                ),
                ("original", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "protocol",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolmodel",
                    ),
                ),
                (
                    "step_section",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolsection",
                    ),
                ),
                (
                    "branch_from",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolstep",
                    ),
                ),
                (
                    "previous_step",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolstep",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical protocol step",
                "verbose_name_plural": "historical protocol steps",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("unique_id", models.UUIDField(db_index=True, unique=True)),
                ("enabled", models.BooleanField(default=False)),
                ("name", models.TextField(blank=True, null=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("processing", models.BooleanField(default=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "editors",
                    models.ManyToManyField(
                        blank=True,
                        related_name="editor_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_resources",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "protocols",
                    models.ManyToManyField(blank=True, related_name="sessions", to="ccrv.protocolmodel"),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "viewers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="viewer_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("project_name", models.CharField(max_length=255)),
                ("project_description", models.TextField(blank=True, null=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "is_vaulted",
                    models.BooleanField(
                        default=False,
                        help_text="True if this project is in a user's import vault",
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_resources",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "sessions",
                    models.ManyToManyField(blank=True, related_name="projects", to="ccrv.session"),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalTimeKeeper",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("start_time", models.DateTimeField(blank=True, editable=False)),
                ("started", models.BooleanField(default=False)),
                ("current_duration", models.IntegerField(blank=True, null=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.protocolstep",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccrv.session",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical time keeper",
                "verbose_name_plural": "historical time keepers",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="StepReagent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.FloatField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("scalable", models.BooleanField(default=False)),
                ("scalable_factor", models.FloatField(default=1.0)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "reagent",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="ccm.reagent"),
                ),
                (
                    "step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reagents",
                        to="ccrv.protocolstep",
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="StepVariation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("variation_description", models.TextField()),
                ("variation_duration", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="step_variations",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="variations",
                        to="ccrv.protocolstep",
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="TimeKeeper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField(auto_now=True)),
                ("started", models.BooleanField(default=False)),
                ("current_duration", models.IntegerField(blank=True, null=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_keeper",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_keeper",
                        to="ccrv.session",
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_keeper",
                        to="ccrv.protocolstep",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_keeper",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ProtocolRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("complexity_rating", models.IntegerField(default=0)),
                ("duration_rating", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "protocol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to="ccrv.protocolmodel",
                    ),
                ),
                (
                    "remote_host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="protocol_ratings",
                        to="ccc.remotehost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="protocol_ratings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
                "unique_together": {("protocol", "user")},
            },
        ),
    ]
