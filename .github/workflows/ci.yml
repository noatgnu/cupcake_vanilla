name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: cupcake_vanilla_pass
          POSTGRES_USER: cupcake_vanilla
          POSTGRES_DB: cupcake_vanilla_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run pre-commit hooks
      run: |
        poetry run pre-commit install
        poetry run pre-commit run --all-files


    - name: Run tests
      env:
        DATABASE_URL: postgresql://cupcake_vanilla:cupcake_vanilla_pass@localhost:5432/cupcake_vanilla_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings
        ENABLE_CUPCAKE_MACARON: true
        ENABLE_CUPCAKE_MINT_CHOCOLATE: true
        ENABLE_CUPCAKE_RED_VELVET: true
        ENABLE_CUPCAKE_SALTED_CARAMEL: true
      run: |
        poetry run python manage.py migrate
        poetry run python manage.py test ccc.tests ccv.tests ccm.tests ccmc.tests ccrv.tests ccsc.tests --verbosity=2


  test-electron:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies-electron
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-electron-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies with Electron group
      if: steps.cached-poetry-dependencies-electron.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with electron

    - name: Install project with Electron dependencies
      run: poetry install --no-interaction --with electron

    - name: Test Electron environment configuration
      env:
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings_electron
        ELECTRON_DEBUG: true
        SECRET_KEY: test-electron-secret-key
      run: |
        poetry run python manage.py check --settings=cupcake_vanilla.settings_electron
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings_electron')
        import django
        django.setup()
        from django.conf import settings
        "

    - name: Test py-pglite startup script
      env:
        ELECTRON_APP_DATA: /tmp/electron-test
      run: |
        mkdir -p /tmp/electron-test/cupcake-vanilla/database

        # Test the independent startup script
        poetry run python start_pglite.py --status || echo "py-pglite not running (expected)"

        # Test connection info display
        poetry run python start_pglite.py --connection-info

        # Test starting py-pglite in foreground (works better in CI)
        poetry run python start_pglite.py --verbose &
        PGLITE_PID=$!
        sleep 10

        # Verify it's running
        if ! poetry run python start_pglite.py --status; then
          echo "py-pglite failed to start, checking logs and processes..."
          ps aux | grep pglite || true
          ls -la /tmp/electron-test/cupcake-vanilla/database/
          if [ -f /tmp/electron-test/cupcake-vanilla/database/pglite.log ]; then
            echo "=== py-pglite log ==="
            cat /tmp/electron-test/cupcake-vanilla/database/pglite.log
          fi
          # Kill background process if it's still running
          kill $PGLITE_PID 2>/dev/null || true
          exit 1
        fi

        # Test Django settings with running py-pglite
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings_electron')
        import django
        django.setup()
        from django.conf import settings
        from cupcake_vanilla.settings_electron import get_database_info, check_database_status

        print('Database backend:', settings.DATABASE_BACKEND)
        print('Database info:', get_database_info())
        print('Database status:', check_database_status())
        "

        # Stop py-pglite
        poetry run python start_pglite.py --stop || true
        if [ ! -z "$PGLITE_PID" ]; then
          kill $PGLITE_PID 2>/dev/null || true
        fi

    - name: Run tests for all applications under Electron conditions
      env:
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings_electron
        ELECTRON_DEBUG: true
        SECRET_KEY: test-electron-secret-key
        ELECTRON_APP_DATA: /tmp/electron-test
        ENABLE_CUPCAKE_MACARON: true
        ENABLE_CUPCAKE_MINT_CHOCOLATE: true
        ENABLE_CUPCAKE_RED_VELVET: true
        ENABLE_CUPCAKE_SALTED_CARAMEL: true
      run: |
        # Start py-pglite using the independent script in foreground mode
        poetry run python start_pglite.py --verbose &
        PGLITE_PID=$!
        sleep 15

        # Verify py-pglite is running
        if ! poetry run python start_pglite.py --status; then
          echo "py-pglite failed to start, checking logs and processes..."
          ps aux | grep pglite || true
          ls -la /tmp/electron-test/cupcake-vanilla/database/
          if [ -f /tmp/electron-test/cupcake-vanilla/database/pglite.log ]; then
            echo "=== py-pglite log ==="
            cat /tmp/electron-test/cupcake-vanilla/database/pglite.log
          fi
          kill $PGLITE_PID 2>/dev/null || true
          exit 1
        fi

        # Run migrations
        poetry run python manage.py migrate

        # Run all tests
        poetry run python manage.py test ccc.tests --keepdb --verbosity=1 || echo "CCC tests failed"
        poetry run python manage.py test ccv.tests --keepdb --verbosity=1 || echo "CCV tests failed"
        poetry run python manage.py test ccm.tests --keepdb --verbosity=1 || echo "CCM tests failed"
        poetry run python manage.py test ccmc.tests --keepdb --verbosity=1 || echo "CCMC tests failed"
        poetry run python manage.py test ccrv.tests --keepdb --verbosity=1 || echo "CCRV tests failed"
        poetry run python manage.py test ccsc.tests --keepdb --verbosity=1 || echo "CCSC tests failed"

        # Stop py-pglite cleanly
        poetry run python start_pglite.py --stop || true

        # Also kill any background processes as fallback
        if [ ! -z "$PGLITE_PID" ]; then
          kill $PGLITE_PID 2>/dev/null || true
        fi
        pkill -f "start_pglite.py" 2>/dev/null || true

    - name: Test sync task functionality in Electron environment
      env:
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings_electron
        ELECTRON_DEBUG: true
        SECRET_KEY: test-electron-secret-key
      run: |
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings_electron')
        import django
        django.setup()
        from django.conf import settings
        from ccv.tasks.validation_tasks import validate_metadata_table_sync
        from ccv.tasks.reorder_tasks import reorder_metadata_table_columns_sync
        "

    - name: Test async task deletion functionality
      env:
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings_electron
        ELECTRON_DEBUG: true
        SECRET_KEY: test-electron-secret-key
      run: |
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings_electron')
        import django
        django.setup()
        from django.contrib.auth.models import User
        from ccv.task_models import AsyncTaskStatus
        from ccv.async_views import AsyncTaskViewSet
        from rest_framework.test import APIRequestFactory
        from rest_framework.request import Request

        # Test that task deletion methods exist and are callable
        viewset = AsyncTaskViewSet()
        factory = APIRequestFactory()

        # Test cancel method (which now handles deletion)
        assert hasattr(viewset, 'cancel'), 'cancel method should exist'

        # Test cleanup_completed method
        assert hasattr(viewset, 'cleanup_completed'), 'cleanup_completed method should exist'

        # Test that cancel action is properly configured for DELETE method
        cancel_action = getattr(viewset.__class__, 'cancel', None)
        assert cancel_action is not None, 'cancel action should exist'

        # Verify the action is configured for DELETE method
        action_kwargs = getattr(cancel_action, 'kwargs', {})
        methods = action_kwargs.get('methods', [])
        assert 'delete' in [m.lower() for m in methods], 'cancel action should accept DELETE method'

        print('Task deletion functionality tests passed')
        "

    - name: Test WebSocket routing system
      env:
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings_electron
        ELECTRON_DEBUG: true
        SECRET_KEY: test-electron-secret-key
      run: |
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings_electron')
        import django
        django.setup()
        from ccc.websocket_routing import create_websocket_router, WebSocketUrlManager

        # Test WebSocket router creation
        router = create_websocket_router(auto_discover=True, raise_on_conflict=False)
        assert router is not None, 'WebSocket router should be created'

        # Test URL manager
        manager = WebSocketUrlManager()
        assert hasattr(manager, 'auto_discover_patterns'), 'auto_discover_patterns method should exist'
        assert hasattr(manager, 'detect_conflicts'), 'detect_conflicts method should exist'
        assert hasattr(manager, 'get_merged_patterns'), 'get_merged_patterns method should exist'

        print('WebSocket routing system tests passed')
        "

    - name: Test reorder task completion signals
      env:
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings_electron
        ELECTRON_DEBUG: true
        SECRET_KEY: test-electron-secret-key
      run: |
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings_electron')
        import django
        django.setup()
        from ccv.tasks.reorder_tasks import (
            reorder_metadata_table_columns_sync,
            reorder_metadata_table_template_columns_sync
        )

        # Test that sync functions exist and are callable
        assert callable(reorder_metadata_table_columns_sync), 'reorder_metadata_table_columns_sync should be callable'
        assert callable(reorder_metadata_table_template_columns_sync), 'reorder_metadata_table_template_columns_sync should be callable'

        print('Reorder task completion functionality verified')
        "

    - name: Test system info endpoint simulation
      env:
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings_electron
        ELECTRON_DEBUG: true
        SECRET_KEY: test-electron-secret-key
      run: |
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings_electron')
        import django
        django.setup()
        from django.conf import settings

        info = {
            'async_tasks_enabled': True,
            'is_electron_environment': getattr(settings, 'IS_ELECTRON_ENVIRONMENT', False),
            'sync_operations_only': getattr(settings, 'SYNC_OPERATIONS_ONLY', False),
        }

        if hasattr(settings, 'ELECTRON_SETTINGS'):
            electron_settings = getattr(settings, 'ELECTRON_SETTINGS', {})
            info.update({
                'electron_settings': {
                    'database_backend': electron_settings.get('DATABASE_BACKEND'),
                    'sync_operations_only': electron_settings.get('SYNC_OPERATIONS_ONLY', False),
                    'is_electron_environment': electron_settings.get('IS_ELECTRON_ENVIRONMENT', False),
                }
            })
        "

  test-environment-switching:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: cupcake_vanilla_pass
          POSTGRES_USER: cupcake_vanilla
          POSTGRES_DB: cupcake_vanilla_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies with Electron group
      run: poetry install --no-interaction --with electron

    - name: Test normal environment with async tasks
      env:
        DATABASE_URL: postgresql://cupcake_vanilla:cupcake_vanilla_pass@localhost:5432/cupcake_vanilla_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings
      run: |
        poetry run python manage.py migrate
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings')
        import django
        django.setup()
        from django.conf import settings
        "

    - name: Test Electron environment with sync-only operations
      env:
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings_electron
        ELECTRON_DEBUG: true
        SECRET_KEY: test-electron-secret-key
      run: |
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings_electron')
        import django
        django.setup()
        from django.conf import settings
        "

    - name: Test sync/async parity functions
      env:
        DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings
        DATABASE_URL: postgresql://cupcake_vanilla:cupcake_vanilla_pass@localhost:5432/cupcake_vanilla_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
      run: |
        poetry run python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cupcake_vanilla.settings')
        import django
        django.setup()

        from ccv.tasks.validation_tasks import validate_metadata_table_sync, validate_metadata_table_task
        from ccv.tasks.reorder_tasks import reorder_metadata_table_columns_sync, reorder_metadata_table_columns_task
        from ccv.tasks.reorder_tasks import reorder_metadata_table_template_columns_sync, reorder_metadata_table_template_columns_task
        "
