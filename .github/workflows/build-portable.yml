name: Build Portable Distribution

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create virtual environment and install dependencies
      shell: bash
      run: |
        python -m venv .venv
        if [ "$RUNNER_OS" == "Windows" ]; then
          .venv/Scripts/python.exe -m pip install --upgrade pip
          .venv/Scripts/pip.exe install -r requirements.txt
        else
          .venv/bin/python -m pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt
        fi

    - name: Create portable distribution
      shell: bash
      run: |
        VERSION="${GITHUB_REF#refs/tags/v}"
        if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
          VERSION="dev-$(date +%Y%m%d)"
        fi

        OS_NAME="${{ matrix.os }}"
        OS_NAME="${OS_NAME%-latest}"

        DIST_NAME="cupcake_vanilla-${VERSION}-${OS_NAME}-python${{ matrix.python-version }}"
        DIST_DIR="dist/${DIST_NAME}"

        mkdir -p "${DIST_DIR}"

        echo "Copying virtual environment (excluding cache)..."
        mkdir -p "${DIST_DIR}/venv"
        if [ "$RUNNER_OS" == "Windows" ]; then
          rsync -a --exclude='__pycache__' --exclude='*.pyc' --exclude='pip-cache' .venv/ "${DIST_DIR}/venv/" || cp -r .venv "${DIST_DIR}/venv"
        else
          rsync -a --exclude='__pycache__' --exclude='*.pyc' --exclude='pip-cache' .venv/ "${DIST_DIR}/venv/" || cp -r .venv "${DIST_DIR}/venv"
        fi

        echo "Copying source code..."
        cp -r ccv ccc ccm ccmc ccrv ccsc cupcake_vanilla manage.py "${DIST_DIR}/"

        if [ -f "pyproject.toml" ]; then
          cp pyproject.toml "${DIST_DIR}/"
        fi
        if [ -f "poetry.lock" ]; then
          cp poetry.lock "${DIST_DIR}/"
        fi

        cat > "${DIST_DIR}/activate.sh" << 'EOF'
        #!/bin/bash
        SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        source "${SCRIPT_DIR}/venv/bin/activate"
        export PYTHONPATH="${SCRIPT_DIR}:${PYTHONPATH}"
        echo "Cupcake Vanilla environment activated"
        echo "Run: python manage.py runserver"
        EOF

        cat > "${DIST_DIR}/activate.bat" << 'EOF'
        @echo off
        set SCRIPT_DIR=%~dp0
        call "%SCRIPT_DIR%venv\Scripts\activate.bat"
        set PYTHONPATH=%SCRIPT_DIR%;%PYTHONPATH%
        echo Cupcake Vanilla environment activated
        echo Run: python manage.py runserver
        EOF

        chmod +x "${DIST_DIR}/activate.sh"

        cd dist
        tar -czf "${DIST_NAME}.tar.gz" "${DIST_NAME}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: cupcake_vanilla-${{ matrix.os }}-python${{ matrix.python-version }}
        path: dist/*.tar.gz
        retention-days: 30

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
