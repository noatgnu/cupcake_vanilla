name: Build Portable Distribution

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            platform: x86_64-unknown-linux-gnu
            os_name: linux
          - os: windows-latest
            arch: x86_64
            platform: x86_64-pc-windows-msvc-shared
            os_name: windows
          - os: macos-13
            arch: x86_64
            platform: x86_64-apple-darwin
            os_name: macos
          - os: macos-latest
            arch: aarch64
            platform: aarch64-apple-darwin
            os_name: macos
          - os: macos-latest
            arch: aarch64
            platform: aarch64-unknown-linux-gnu
            os_name: linux

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Get latest Python 3.11 standalone build
      id: get-python
      shell: bash
      run: |
        PLATFORM="${{ matrix.platform }}"
        RELEASES_URL="https://api.github.com/repos/indygreg/python-build-standalone/releases"

        LATEST_RELEASE=$(curl -s "$RELEASES_URL" | grep -o '"tag_name": "[^"]*"' | head -1 | sed 's/"tag_name": "\(.*\)"/\1/')
        echo "Latest release: $LATEST_RELEASE"

        RELEASE_URL="https://api.github.com/repos/indygreg/python-build-standalone/releases/tags/$LATEST_RELEASE"
        DOWNLOAD_URL=$(curl -s "$RELEASE_URL" | grep -o "https://[^\"]*cpython-3\.11[^\"]*${PLATFORM}-install_only\.tar\.gz" | head -1)

        if [ -z "$DOWNLOAD_URL" ]; then
          echo "Error: Could not find Python 3.11 for platform $PLATFORM"
          exit 1
        fi

        echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
        echo "Found Python download: $DOWNLOAD_URL"

    - name: Download and extract portable Python
      shell: bash
      run: |
        curl -L -o python.tar.gz "${{ steps.get-python.outputs.download_url }}"
        mkdir -p python_portable
        tar -xzf python.tar.gz -C python_portable
        rm python.tar.gz

    - name: Create virtual environment and install dependencies
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          PYTHON_BIN="python_portable/python/python.exe"
        else
          PYTHON_BIN="python_portable/python/bin/python3"
        fi

        $PYTHON_BIN -m venv .venv

        if [ "$RUNNER_OS" == "Windows" ]; then
          .venv/Scripts/python.exe -m pip install --upgrade pip
          .venv/Scripts/pip.exe install -r requirements.txt
        else
          .venv/bin/python -m pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt
        fi

    - name: Create portable distribution
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
        else
          VERSION="dev-$(date +%Y%m%d)"
        fi

        DIST_NAME="cupcake_vanilla-${VERSION}-${{ matrix.os_name }}-${{ matrix.arch }}"
        DIST_DIR="dist/${DIST_NAME}"

        mkdir -p "${DIST_DIR}"

        echo "Copying virtual environment (excluding cache)..."
        mkdir -p "${DIST_DIR}/venv"
        if [ "$RUNNER_OS" == "Windows" ]; then
          rsync -a --exclude='__pycache__' --exclude='*.pyc' --exclude='pip-cache' .venv/ "${DIST_DIR}/venv/" || cp -r .venv "${DIST_DIR}/venv"
        else
          rsync -a --exclude='__pycache__' --exclude='*.pyc' --exclude='pip-cache' .venv/ "${DIST_DIR}/venv/" || cp -r .venv "${DIST_DIR}/venv"
        fi

        echo "Copying source code..."
        cp -r ccv ccc ccm ccmc ccrv ccsc cupcake_vanilla manage.py "${DIST_DIR}/"

        if [ -f "pyproject.toml" ]; then
          cp pyproject.toml "${DIST_DIR}/"
        fi
        if [ -f "poetry.lock" ]; then
          cp poetry.lock "${DIST_DIR}/"
        fi

        cat > "${DIST_DIR}/activate.sh" << 'EOF'
        #!/bin/bash
        SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        source "${SCRIPT_DIR}/venv/bin/activate"
        export PYTHONPATH="${SCRIPT_DIR}:${PYTHONPATH}"
        echo "Cupcake Vanilla environment activated"
        echo "Run: python manage.py runserver"
        EOF

        cat > "${DIST_DIR}/activate.bat" << 'EOF'
        @echo off
        set SCRIPT_DIR=%~dp0
        call "%SCRIPT_DIR%venv\Scripts\activate.bat"
        set PYTHONPATH=%SCRIPT_DIR%;%PYTHONPATH%
        echo Cupcake Vanilla environment activated
        echo Run: python manage.py runserver
        EOF

        chmod +x "${DIST_DIR}/activate.sh"

        cd dist
        tar -czf "${DIST_NAME}.tar.gz" "${DIST_NAME}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: cupcake_vanilla-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/*.tar.gz
        retention-days: 30

    - name: Upload to Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.tar.gz
        tag_name: ${{ github.event.release.tag_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
