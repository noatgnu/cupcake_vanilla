# Generated by Django 5.2.5 on 2025-08-23 16:30

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import simple_history.models

import ccv.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("ccc", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("drf_chunked_upload", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CellOntology",
            fields=[
                (
                    "identifier",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                ("definition", models.TextField(blank=True, null=True)),
                ("synonyms", models.TextField(blank=True, null=True)),
                ("accession", models.CharField(blank=True, max_length=255, null=True)),
                ("cell_line", models.BooleanField(default=False)),
                ("organism", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "tissue_origin",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "disease_context",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("parent_terms", models.TextField(blank=True, null=True)),
                ("part_of", models.TextField(blank=True, null=True)),
                ("develops_from", models.TextField(blank=True, null=True)),
                ("source", models.CharField(default="cl", max_length=50)),
                ("obsolete", models.BooleanField(default=False)),
                (
                    "replacement_term",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Cell Ontology",
                "verbose_name_plural": "Cell Ontology Terms",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ChEBICompound",
            fields=[
                (
                    "identifier",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.TextField()),
                ("definition", models.TextField(blank=True, null=True)),
                ("synonyms", models.TextField(blank=True, null=True)),
                ("formula", models.CharField(blank=True, max_length=255, null=True)),
                ("mass", models.FloatField(blank=True, null=True)),
                ("charge", models.IntegerField(blank=True, null=True)),
                ("inchi", models.TextField(blank=True, null=True)),
                ("smiles", models.TextField(blank=True, null=True)),
                ("parent_terms", models.TextField(blank=True, null=True)),
                ("roles", models.TextField(blank=True, null=True)),
                ("obsolete", models.BooleanField(default=False)),
                (
                    "replacement_term",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "ChEBI Compound",
                "verbose_name_plural": "ChEBI Compounds",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HumanDisease",
            fields=[
                (
                    "identifier",
                    models.CharField(
                        help_text="Disease identifier",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "acronym",
                    models.CharField(
                        blank=True,
                        help_text="Disease acronym",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "accession",
                    models.CharField(help_text="Disease accession number", max_length=255),
                ),
                (
                    "definition",
                    models.TextField(blank=True, help_text="Disease definition", null=True),
                ),
                (
                    "synonyms",
                    models.TextField(blank=True, help_text="Disease synonyms", null=True),
                ),
                (
                    "cross_references",
                    models.TextField(
                        blank=True,
                        help_text="Cross-references to other databases",
                        null=True,
                    ),
                ),
                (
                    "keywords",
                    models.TextField(blank=True, help_text="Associated keywords", null=True),
                ),
            ],
            options={
                "verbose_name": "Human Disease",
                "verbose_name_plural": "Human Diseases",
                "ordering": ["identifier"],
            },
        ),
        migrations.CreateModel(
            name="MetadataFileUpload",
            fields=[
                (
                    "chunkedupload_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="drf_chunked_upload.chunkedupload",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("drf_chunked_upload.chunkedupload",),
        ),
        migrations.CreateModel(
            name="MondoDisease",
            fields=[
                (
                    "identifier",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                ("definition", models.TextField(blank=True, null=True)),
                ("synonyms", models.TextField(blank=True, null=True)),
                ("xrefs", models.TextField(blank=True, null=True)),
                ("parent_terms", models.TextField(blank=True, null=True)),
                ("obsolete", models.BooleanField(default=False)),
                (
                    "replacement_term",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "MONDO Disease",
                "verbose_name_plural": "MONDO Diseases",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MSUniqueVocabularies",
            fields=[
                (
                    "accession",
                    models.CharField(
                        help_text="MS term accession",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(help_text="Term name", max_length=255)),
                (
                    "definition",
                    models.TextField(blank=True, help_text="Term definition", null=True),
                ),
                (
                    "term_type",
                    models.TextField(
                        blank=True,
                        help_text="Type of term (e.g., instrument, cleavage agent)",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "MS Vocabulary Term",
                "verbose_name_plural": "MS Vocabulary Terms",
                "ordering": ["accession"],
            },
        ),
        migrations.CreateModel(
            name="NCBITaxonomy",
            fields=[
                ("tax_id", models.IntegerField(primary_key=True, serialize=False)),
                ("scientific_name", models.CharField(max_length=255)),
                (
                    "common_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("synonyms", models.TextField(blank=True, null=True)),
                ("rank", models.CharField(blank=True, max_length=100, null=True)),
                ("parent_tax_id", models.IntegerField(blank=True, null=True)),
                ("lineage", models.TextField(blank=True, null=True)),
                ("genetic_code", models.IntegerField(blank=True, null=True)),
                (
                    "mitochondrial_genetic_code",
                    models.IntegerField(blank=True, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "NCBI Taxonomy",
                "verbose_name_plural": "NCBI Taxonomy",
                "ordering": ["scientific_name"],
            },
        ),
        migrations.CreateModel(
            name="PSIMSOntology",
            fields=[
                (
                    "identifier",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                ("definition", models.TextField(blank=True, null=True)),
                ("synonyms", models.TextField(blank=True, null=True)),
                ("parent_terms", models.TextField(blank=True, null=True)),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                ("obsolete", models.BooleanField(default=False)),
                (
                    "replacement_term",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "PSI-MS Ontology",
                "verbose_name_plural": "PSI-MS Ontology Terms",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Species",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(help_text="UniProt species code", max_length=255),
                ),
                ("taxon", models.IntegerField(help_text="NCBI Taxonomy ID")),
                (
                    "official_name",
                    models.CharField(help_text="Official species name", max_length=255),
                ),
                (
                    "common_name",
                    models.CharField(
                        blank=True,
                        help_text="Common species name",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "synonym",
                    models.CharField(
                        blank=True,
                        help_text="Species synonym",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Species",
                "verbose_name_plural": "Species",
                "ordering": ["official_name"],
            },
        ),
        migrations.CreateModel(
            name="SubcellularLocation",
            fields=[
                (
                    "location_identifier",
                    models.TextField(blank=True, help_text="Location identifier", null=True),
                ),
                (
                    "topology_identifier",
                    models.TextField(blank=True, help_text="Topology identifier", null=True),
                ),
                (
                    "orientation_identifier",
                    models.TextField(blank=True, help_text="Orientation identifier", null=True),
                ),
                (
                    "accession",
                    models.CharField(
                        help_text="Subcellular location accession",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "definition",
                    models.TextField(blank=True, help_text="Location definition", null=True),
                ),
                (
                    "synonyms",
                    models.TextField(blank=True, help_text="Location synonyms", null=True),
                ),
                (
                    "content",
                    models.TextField(blank=True, help_text="Content description", null=True),
                ),
                (
                    "is_a",
                    models.TextField(blank=True, help_text="Parent relationships", null=True),
                ),
                (
                    "part_of",
                    models.TextField(blank=True, help_text="Part-of relationships", null=True),
                ),
                (
                    "keyword",
                    models.TextField(blank=True, help_text="Associated keywords", null=True),
                ),
                (
                    "gene_ontology",
                    models.TextField(blank=True, help_text="Gene Ontology terms", null=True),
                ),
                (
                    "annotation",
                    models.TextField(blank=True, help_text="Additional annotations", null=True),
                ),
                (
                    "references",
                    models.TextField(blank=True, help_text="Literature references", null=True),
                ),
                (
                    "links",
                    models.TextField(blank=True, help_text="External links", null=True),
                ),
            ],
            options={
                "verbose_name": "Subcellular Location",
                "verbose_name_plural": "Subcellular Locations",
                "ordering": ["accession"],
            },
        ),
        migrations.CreateModel(
            name="Tissue",
            fields=[
                (
                    "identifier",
                    models.CharField(
                        help_text="Tissue identifier",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "accession",
                    models.CharField(help_text="Tissue accession number", max_length=255),
                ),
                (
                    "synonyms",
                    models.TextField(blank=True, help_text="Tissue synonyms", null=True),
                ),
                (
                    "cross_references",
                    models.TextField(
                        blank=True,
                        help_text="Cross-references to other databases",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["identifier"],
            },
        ),
        migrations.CreateModel(
            name="UberonAnatomy",
            fields=[
                (
                    "identifier",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                ("definition", models.TextField(blank=True, null=True)),
                ("synonyms", models.TextField(blank=True, null=True)),
                ("xrefs", models.TextField(blank=True, null=True)),
                ("parent_terms", models.TextField(blank=True, null=True)),
                ("part_of", models.TextField(blank=True, null=True)),
                ("develops_from", models.TextField(blank=True, null=True)),
                ("obsolete", models.BooleanField(default=False)),
                (
                    "replacement_term",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "UBERON Anatomy",
                "verbose_name_plural": "UBERON Anatomy Terms",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Unimod",
            fields=[
                (
                    "accession",
                    models.CharField(
                        help_text="Unimod accession",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Modification name", max_length=255),
                ),
                (
                    "definition",
                    models.TextField(blank=True, help_text="Modification definition", null=True),
                ),
                (
                    "additional_data",
                    models.JSONField(blank=True, help_text="Additional modification data", null=True),
                ),
            ],
            options={
                "verbose_name": "Unimod Modification",
                "verbose_name_plural": "Unimod Modifications",
                "ordering": ["accession"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalMetadataTable",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "name",
                    models.CharField(help_text="Name of the metadata table", max_length=255),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the metadata table",
                        null=True,
                    ),
                ),
                (
                    "sample_count",
                    models.PositiveIntegerField(default=0, help_text="Number of samples in this table"),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0",
                        help_text="Version of the metadata table",
                        max_length=50,
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this table is published/finalized",
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical metadata table",
                "verbose_name_plural": "historical metadata tables",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMetadataTableTemplate",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("name", models.TextField(help_text="Name of the template")),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the template", null=True),
                ),
                (
                    "field_mask_mapping",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Mapping for customizing field display names",
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, help_text="Whether this is a default template"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical metadata table template",
                "verbose_name_plural": "historical metadata table templates",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="MetadataColumnTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="Template name", max_length=255)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the template", null=True),
                ),
                (
                    "column_name",
                    models.CharField(help_text="Default name for the metadata column", max_length=255),
                ),
                (
                    "column_type",
                    models.CharField(
                        default="characteristics",
                        help_text="Data type (e.g., 'factor value', 'characteristics')",
                        max_length=255,
                    ),
                ),
                (
                    "default_value",
                    models.TextField(blank=True, help_text="Default value for the column", null=True),
                ),
                (
                    "default_position",
                    models.IntegerField(
                        blank=True,
                        help_text="Default column position when used in tables",
                        null=True,
                    ),
                ),
                (
                    "ontology_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("species", "Species"),
                            ("tissue", "Tissue"),
                            ("human_disease", "Human Disease"),
                            ("subcellular_location", "Subcellular Location"),
                            ("ms_terms", "MS Terms"),
                            ("unimod", "Unimod Modifications"),
                            ("ncbi_taxonomy", "NCBI Taxonomy"),
                            ("mondo", "MONDO Disease"),
                            ("uberon", "UBERON Anatomy"),
                            ("subcellular_location", "Subcellular Location"),
                            ("chebi", "ChEBI"),
                            ("cell_ontology", "Cell Ontology"),
                            ("ms_unique_vocabularies", "MS Unique Vocabularies"),
                            ("psi_ms", "PSI-MS Controlled Vocabulary"),
                        ],
                        help_text="Type of ontology to use for validation and suggestions",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "ontology_options",
                    models.JSONField(blank=True, help_text="Ontology options", null=True),
                ),
                (
                    "custom_ontology_filters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom filters to apply when querying the ontology",
                    ),
                ),
                (
                    "enable_typeahead",
                    models.BooleanField(default=True, help_text="Enable typeahead suggestions in forms"),
                ),
                (
                    "excel_validation",
                    models.BooleanField(
                        default=True,
                        help_text="Add dropdown validation in Excel exports",
                    ),
                ),
                (
                    "custom_validation_rules",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom validation rules for this template",
                    ),
                ),
                (
                    "api_enhancements",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional API enhancements and configurations",
                    ),
                ),
                (
                    "is_system_template",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a system-provided template",
                    ),
                ),
                (
                    "usage_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of times this template has been used",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags for categorizing and searching templates",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        help_text="Category for organizing templates",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "source_schema",
                    models.CharField(
                        blank=True,
                        help_text="Schema name this template was loaded from",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "last_used_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this template was last used",
                        null=True,
                    ),
                ),
                (
                    "base_column",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a base column template for core metadata",
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_resources",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-usage_count", "name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HistoricalFavouriteMetadataOption",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "name",
                    models.CharField(help_text="Metadata column name", max_length=255),
                ),
                (
                    "type",
                    models.CharField(help_text="Metadata column type", max_length=255),
                ),
                (
                    "value",
                    models.TextField(blank=True, help_text="The favorite value", null=True),
                ),
                (
                    "display_value",
                    models.TextField(
                        blank=True,
                        help_text="Display-friendly version of the value",
                        null=True,
                    ),
                ),
                (
                    "is_global",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a global recommendation",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Lab group this favorite applies to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created this favorite",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "column_template",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Column template this favorite was created from",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccv.metadatacolumntemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical favourite metadata option",
                "verbose_name_plural": "historical favourite metadata options",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="MetadataColumnTemplateShare",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("view", "View Only"),
                            ("use", "Use Template"),
                            ("edit", "Edit Template"),
                        ],
                        default="use",
                        help_text="Level of access granted",
                        max_length=10,
                    ),
                ),
                ("shared_at", models.DateTimeField(auto_now_add=True)),
                (
                    "last_accessed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the user last accessed this template",
                        null=True,
                    ),
                ),
                (
                    "shared_by",
                    models.ForeignKey(
                        help_text="User who shared the template",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="template_shares_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="template_shares",
                        to="ccv.metadatacolumntemplate",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="template_shares_received",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="metadatacolumntemplate",
            name="shared_with_users",
            field=models.ManyToManyField(
                blank=True,
                help_text="Users this template is explicitly shared with",
                related_name="shared_column_templates",
                through="ccv.MetadataColumnTemplateShare",
                through_fields=("template", "user"),
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="MetadataTable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(help_text="Name of the metadata table", max_length=255),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the metadata table",
                        null=True,
                    ),
                ),
                (
                    "sample_count",
                    models.PositiveIntegerField(default=0, help_text="Number of samples in this table"),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0",
                        help_text="Version of the metadata table",
                        max_length=50,
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this table is published/finalized",
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_resources",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "name"],
            },
        ),
        migrations.CreateModel(
            name="MetadataColumn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the metadata column", max_length=255),
                ),
                (
                    "type",
                    models.CharField(
                        help_text="Data type (e.g., 'factor value', 'characteristics')",
                        max_length=255,
                    ),
                ),
                (
                    "column_position",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="Position in column ordering",
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(blank=True, help_text="Default or current value", null=True),
                ),
                (
                    "not_applicable",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this column is marked as not applicable",
                    ),
                ),
                (
                    "mandatory",
                    models.BooleanField(default=False, help_text="Whether this column is required"),
                ),
                (
                    "hidden",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this column is hidden from main view",
                    ),
                ),
                (
                    "auto_generated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this column is automatically generated",
                    ),
                ),
                (
                    "readonly",
                    models.BooleanField(default=False, help_text="Whether this column is read-only"),
                ),
                (
                    "modifiers",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Sample-specific value modifications",
                    ),
                ),
                (
                    "ontology_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("species", "Species"),
                            ("tissue", "Tissue"),
                            ("human_disease", "Human Disease"),
                            ("subcellular_location", "Subcellular Location"),
                            ("unimod", "Unimod Modifications"),
                            ("ncbi_taxonomy", "NCBI Taxonomy"),
                            ("mondo", "MONDO Disease"),
                            ("uberon", "UBERON Anatomy"),
                            ("subcellular_location", "Subcellular Location"),
                            ("chebi", "ChEBI"),
                            ("cell_ontology", "Cell Ontology"),
                            ("ms_unique_vocabularies", "MS Unique Vocabularies"),
                            ("psi_ms", "PSI-MS Controlled Vocabulary"),
                        ],
                        help_text="Type of ontology to use for validation and suggestions",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "ontology_options",
                    models.JSONField(blank=True, help_text="Ontology options", null=True),
                ),
                (
                    "custom_ontology_filters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom filters to apply when querying the ontology",
                    ),
                ),
                (
                    "suggested_values",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Cached suggested values from ontology",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        help_text="Template this column was created from",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_columns",
                        to="ccv.metadatacolumntemplate",
                    ),
                ),
                (
                    "metadata_table",
                    models.ForeignKey(
                        blank=True,
                        help_text="Metadata table this column belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="columns",
                        to="ccv.metadatatable",
                    ),
                ),
            ],
            options={
                "ordering": ["metadata_table", "column_position", "name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalSamplePool",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "pool_name",
                    models.CharField(help_text="Name of the sample pool", max_length=255),
                ),
                (
                    "pool_description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the pool",
                        null=True,
                    ),
                ),
                (
                    "pooled_only_samples",
                    models.JSONField(
                        default=list,
                        help_text="Sample indices that exist only in this pool",
                    ),
                ),
                (
                    "pooled_and_independent_samples",
                    models.JSONField(
                        default=list,
                        help_text="Sample indices that exist both in pool and independently",
                    ),
                ),
                (
                    "template_sample",
                    models.IntegerField(
                        blank=True,
                        help_text="Sample index to copy metadata from when creating this pool",
                        null=True,
                    ),
                ),
                (
                    "is_reference",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this pool is a reference pool for channel normalization (appears in SDRF export with SN= format)",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "metadata_table",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Metadata table this pool belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccv.metadatatable",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical sample pool",
                "verbose_name_plural": "historical sample pools",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMetadataColumn",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the metadata column", max_length=255),
                ),
                (
                    "type",
                    models.CharField(
                        help_text="Data type (e.g., 'factor value', 'characteristics')",
                        max_length=255,
                    ),
                ),
                (
                    "column_position",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="Position in column ordering",
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(blank=True, help_text="Default or current value", null=True),
                ),
                (
                    "not_applicable",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this column is marked as not applicable",
                    ),
                ),
                (
                    "mandatory",
                    models.BooleanField(default=False, help_text="Whether this column is required"),
                ),
                (
                    "hidden",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this column is hidden from main view",
                    ),
                ),
                (
                    "auto_generated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this column is automatically generated",
                    ),
                ),
                (
                    "readonly",
                    models.BooleanField(default=False, help_text="Whether this column is read-only"),
                ),
                (
                    "modifiers",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Sample-specific value modifications",
                    ),
                ),
                (
                    "ontology_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("species", "Species"),
                            ("tissue", "Tissue"),
                            ("human_disease", "Human Disease"),
                            ("subcellular_location", "Subcellular Location"),
                            ("unimod", "Unimod Modifications"),
                            ("ncbi_taxonomy", "NCBI Taxonomy"),
                            ("mondo", "MONDO Disease"),
                            ("uberon", "UBERON Anatomy"),
                            ("subcellular_location", "Subcellular Location"),
                            ("chebi", "ChEBI"),
                            ("cell_ontology", "Cell Ontology"),
                            ("ms_unique_vocabularies", "MS Unique Vocabularies"),
                            ("psi_ms", "PSI-MS Controlled Vocabulary"),
                        ],
                        help_text="Type of ontology to use for validation and suggestions",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "ontology_options",
                    models.JSONField(blank=True, help_text="Ontology options", null=True),
                ),
                (
                    "custom_ontology_filters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom filters to apply when querying the ontology",
                    ),
                ),
                (
                    "suggested_values",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Cached suggested values from ontology",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Template this column was created from",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccv.metadatacolumntemplate",
                    ),
                ),
                (
                    "metadata_table",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Metadata table this column belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccv.metadatatable",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical metadata column",
                "verbose_name_plural": "historical metadata columns",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="SamplePool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pool_name",
                    models.CharField(help_text="Name of the sample pool", max_length=255),
                ),
                (
                    "pool_description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the pool",
                        null=True,
                    ),
                ),
                (
                    "pooled_only_samples",
                    models.JSONField(
                        default=list,
                        help_text="Sample indices that exist only in this pool",
                    ),
                ),
                (
                    "pooled_and_independent_samples",
                    models.JSONField(
                        default=list,
                        help_text="Sample indices that exist both in pool and independently",
                    ),
                ),
                (
                    "template_sample",
                    models.IntegerField(
                        blank=True,
                        help_text="Sample index to copy metadata from when creating this pool",
                        null=True,
                    ),
                ),
                (
                    "is_reference",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this pool is a reference pool for channel normalization (appears in SDRF export with SN= format)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "metadata_columns",
                    models.ManyToManyField(blank=True, related_name="sample_pools", to="ccv.metadatacolumn"),
                ),
                (
                    "metadata_table",
                    models.ForeignKey(
                        help_text="Metadata table this pool belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sample_pools",
                        to="ccv.metadatatable",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Schema",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name for the schema",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(help_text="Human-readable display name", max_length=200),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of what this schema provides"),
                ),
                (
                    "schema_file",
                    models.FileField(
                        help_text="YAML schema file",
                        upload_to=ccv.models.schema_file_upload_path,
                    ),
                ),
                (
                    "is_builtin",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this schema comes from sdrf-pipelines builtin resources",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags for categorizing schemas (e.g., 'proteomics', 'metabolomics')",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(default=0, help_text="Size of schema file in bytes"),
                ),
                (
                    "file_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA256 hash of schema file for integrity checking",
                        max_length=64,
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(default=0, help_text="Number of times this schema has been used"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this schema is active and available for use",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this schema is publicly available",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who uploaded this schema (null for builtin schemas)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-is_builtin", "name"],
            },
        ),
        migrations.CreateModel(
            name="MetadataTableTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.TextField(help_text="Name of the template")),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the template", null=True),
                ),
                (
                    "field_mask_mapping",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Mapping for customizing field display names",
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, help_text="Whether this is a default template"),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_resources",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_columns",
                    models.ManyToManyField(
                        blank=True,
                        help_text="User-editable metadata columns",
                        related_name="%(app_label)s_%(class)s_templates",
                        to="ccv.metadatacolumn",
                    ),
                ),
                (
                    "schemas",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Schemas used to create this template",
                        related_name="%(app_label)s_%(class)s_templates",
                        to="ccv.schema",
                    ),
                ),
            ],
            options={
                "ordering": ["-is_default", "name"],
            },
        ),
        migrations.AddField(
            model_name="metadatacolumntemplate",
            name="schema",
            field=models.ForeignKey(
                blank=True,
                help_text="Schema model this template is associated with",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="column_templates",
                to="ccv.schema",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalMetadataColumnTemplate",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("metadata_table", "Metadata Table"),
                            ("metadata_table_template", "Metadata Table Template"),
                            ("metadata_column_template", "Metadata Column Template"),
                            ("file", "File"),
                            ("dataset", "Dataset"),
                            ("schema", "Schema"),
                        ],
                        help_text="Type of resource",
                        max_length=50,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Lab Group"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Who can access this resource",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is active/available",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this resource is locked for editing",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(help_text="Template name", max_length=255)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the template", null=True),
                ),
                (
                    "column_name",
                    models.CharField(help_text="Default name for the metadata column", max_length=255),
                ),
                (
                    "column_type",
                    models.CharField(
                        default="characteristics",
                        help_text="Data type (e.g., 'factor value', 'characteristics')",
                        max_length=255,
                    ),
                ),
                (
                    "default_value",
                    models.TextField(blank=True, help_text="Default value for the column", null=True),
                ),
                (
                    "default_position",
                    models.IntegerField(
                        blank=True,
                        help_text="Default column position when used in tables",
                        null=True,
                    ),
                ),
                (
                    "ontology_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("species", "Species"),
                            ("tissue", "Tissue"),
                            ("human_disease", "Human Disease"),
                            ("subcellular_location", "Subcellular Location"),
                            ("ms_terms", "MS Terms"),
                            ("unimod", "Unimod Modifications"),
                            ("ncbi_taxonomy", "NCBI Taxonomy"),
                            ("mondo", "MONDO Disease"),
                            ("uberon", "UBERON Anatomy"),
                            ("subcellular_location", "Subcellular Location"),
                            ("chebi", "ChEBI"),
                            ("cell_ontology", "Cell Ontology"),
                            ("ms_unique_vocabularies", "MS Unique Vocabularies"),
                            ("psi_ms", "PSI-MS Controlled Vocabulary"),
                        ],
                        help_text="Type of ontology to use for validation and suggestions",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "ontology_options",
                    models.JSONField(blank=True, help_text="Ontology options", null=True),
                ),
                (
                    "custom_ontology_filters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom filters to apply when querying the ontology",
                    ),
                ),
                (
                    "enable_typeahead",
                    models.BooleanField(default=True, help_text="Enable typeahead suggestions in forms"),
                ),
                (
                    "excel_validation",
                    models.BooleanField(
                        default=True,
                        help_text="Add dropdown validation in Excel exports",
                    ),
                ),
                (
                    "custom_validation_rules",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom validation rules for this template",
                    ),
                ),
                (
                    "api_enhancements",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional API enhancements and configurations",
                    ),
                ),
                (
                    "is_system_template",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a system-provided template",
                    ),
                ),
                (
                    "usage_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of times this template has been used",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags for categorizing and searching templates",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        help_text="Category for organizing templates",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "source_schema",
                    models.CharField(
                        blank=True,
                        help_text="Schema name this template was loaded from",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "last_used_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this template was last used",
                        null=True,
                    ),
                ),
                (
                    "base_column",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a base column template for core metadata",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Lab group that has access to this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who owns this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "schema",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Schema model this template is associated with",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccv.schema",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical metadata column template",
                "verbose_name_plural": "historical metadata column templates",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="FavouriteMetadataOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Metadata column name", max_length=255),
                ),
                (
                    "type",
                    models.CharField(help_text="Metadata column type", max_length=255),
                ),
                (
                    "value",
                    models.TextField(blank=True, help_text="The favorite value", null=True),
                ),
                (
                    "display_value",
                    models.TextField(
                        blank=True,
                        help_text="Display-friendly version of the value",
                        null=True,
                    ),
                ),
                (
                    "is_global",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a global recommendation",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Lab group this favorite applies to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favourite_metadata_options",
                        to="ccc.labgroup",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this favorite",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="favourite_metadata_options",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "column_template",
                    models.ForeignKey(
                        blank=True,
                        help_text="Column template this favorite was created from",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favourite_options",
                        to="ccv.metadatacolumntemplate",
                    ),
                ),
            ],
            options={
                "ordering": ["name", "type", "display_value"],
                "indexes": [
                    models.Index(fields=["name", "type"], name="ccv_favouri_name_3da864_idx"),
                    models.Index(fields=["user"], name="ccv_favouri_user_id_30b3b5_idx"),
                    models.Index(fields=["is_global"], name="ccv_favouri_is_glob_5c06c2_idx"),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="metadatacolumntemplateshare",
            index=models.Index(
                fields=["user", "permission_level"],
                name="ccv_metadat_user_id_01d75e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="metadatacolumntemplateshare",
            index=models.Index(fields=["template", "shared_at"], name="ccv_metadat_templat_b4a4d9_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="metadatacolumntemplateshare",
            unique_together={("template", "user")},
        ),
        migrations.AddIndex(
            model_name="metadatatable",
            index=models.Index(fields=["is_published"], name="ccv_metadat_is_publ_f11f49_idx"),
        ),
        migrations.AddIndex(
            model_name="metadatatable",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="ccv_metadat_content_4dcf78_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="metadatacolumn",
            index=models.Index(
                fields=["metadata_table", "column_position"],
                name="ccv_metadat_metadat_a94e3a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="metadatacolumn",
            index=models.Index(fields=["metadata_table", "name"], name="ccv_metadat_metadat_b13d5c_idx"),
        ),
        migrations.AddIndex(
            model_name="metadatacolumn",
            index=models.Index(fields=["name", "type"], name="ccv_metadat_name_8fec47_idx"),
        ),
        migrations.AddIndex(
            model_name="samplepool",
            index=models.Index(
                fields=["metadata_table", "pool_name"],
                name="ccv_samplep_metadat_278118_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="samplepool",
            index=models.Index(fields=["created_at"], name="ccv_samplep_created_e53898_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="samplepool",
            unique_together={("metadata_table", "pool_name")},
        ),
        migrations.AddIndex(
            model_name="schema",
            index=models.Index(fields=["name"], name="ccv_schema_name_b4f6e4_idx"),
        ),
        migrations.AddIndex(
            model_name="schema",
            index=models.Index(fields=["is_builtin", "is_active"], name="ccv_schema_is_buil_6f7471_idx"),
        ),
        migrations.AddIndex(
            model_name="schema",
            index=models.Index(fields=["creator", "is_public"], name="ccv_schema_creator_25c761_idx"),
        ),
    ]
