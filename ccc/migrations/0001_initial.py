# Generated by Django 5.2.5 on 2025-08-23 16:30

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalLabGroup",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the lab group", max_length=255),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the lab group", null=True),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether this lab group is active"),
                ),
                (
                    "allow_member_invites",
                    models.BooleanField(
                        default=True,
                        help_text="Whether members can invite other users to this lab group",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created this lab group",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical lab group",
                "verbose_name_plural": "historical lab groups",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="LabGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the lab group", max_length=255),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the lab group", null=True),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether this lab group is active"),
                ),
                (
                    "allow_member_invites",
                    models.BooleanField(
                        default=True,
                        help_text="Whether members can invite other users to this lab group",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this lab group",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_lab_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users who are members of this lab group",
                        related_name="lab_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalLabGroupInvitation",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "invited_email",
                    models.EmailField(help_text="Email address of the invited person", max_length=254),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current status of the invitation",
                        max_length=20,
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        help_text="Optional message from the inviter",
                        null=True,
                    ),
                ),
                (
                    "invitation_token",
                    models.CharField(
                        db_index=True,
                        help_text="Unique token for invitation acceptance",
                        max_length=64,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this invitation expires"),
                ),
                (
                    "responded_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the invitation was responded to",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "invited_user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who was invited (if registered)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "inviter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who sent the invitation",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Lab group the invitation is for",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ccc.labgroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical lab group invitation",
                "verbose_name_plural": "historical lab group invitations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="SiteConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "site_name",
                    models.CharField(
                        default="CUPCAKE",
                        help_text="Name of the site displayed in UI",
                        max_length=255,
                    ),
                ),
                (
                    "logo_url",
                    models.URLField(blank=True, help_text="URL to site logo image", null=True),
                ),
                (
                    "logo_image",
                    models.FileField(
                        blank=True,
                        help_text="Upload custom logo image file (overrides logo_url if provided)",
                        null=True,
                        upload_to="site_logos/",
                    ),
                ),
                (
                    "primary_color",
                    models.CharField(
                        default="#1976d2",
                        help_text="Primary color for the site theme (hex format: #RRGGBB)",
                        max_length=7,
                    ),
                ),
                (
                    "show_powered_by",
                    models.BooleanField(default=True, help_text="Show 'Powered by CUPCAKE' branding"),
                ),
                (
                    "allow_user_registration",
                    models.BooleanField(default=False, help_text="Allow public user registration"),
                ),
                (
                    "enable_orcid_login",
                    models.BooleanField(default=False, help_text="Enable ORCID OAuth login"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated the configuration",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Site Configuration",
                "verbose_name_plural": "Site Configuration",
            },
        ),
        migrations.CreateModel(
            name="AccountMergeRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(help_text="Reason for the merge request")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("completed", "Completed"),
                        ],
                        default="pending",
                        help_text="Current status of the merge request",
                        max_length=20,
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(blank=True, help_text="Notes from admin review", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "completed_at",
                    models.DateTimeField(blank=True, help_text="When the merge was completed", null=True),
                ),
                (
                    "duplicate_user",
                    models.ForeignKey(
                        help_text="The account to merge and remove (source account)",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="merge_requests_as_duplicate",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "primary_user",
                    models.ForeignKey(
                        help_text="The account to keep (target account)",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="merge_requests_as_primary",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        help_text="User who requested the merge",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="initiated_merge_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Admin who reviewed this request",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_merge_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Account Merge Request",
                "verbose_name_plural": "Account Merge Requests",
                "indexes": [
                    models.Index(fields=["status"], name="ccc_account_status_7612ec_idx"),
                    models.Index(fields=["created_at"], name="ccc_account_created_4e9bba_idx"),
                ],
                "unique_together": {("primary_user", "duplicate_user")},
            },
        ),
        migrations.CreateModel(
            name="LabGroupInvitation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "invited_email",
                    models.EmailField(help_text="Email address of the invited person", max_length=254),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current status of the invitation",
                        max_length=20,
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        help_text="Optional message from the inviter",
                        null=True,
                    ),
                ),
                (
                    "invitation_token",
                    models.CharField(
                        help_text="Unique token for invitation acceptance",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this invitation expires"),
                ),
                (
                    "responded_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the invitation was responded to",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "invited_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who was invited (if registered)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_lab_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "inviter",
                    models.ForeignKey(
                        help_text="User who sent the invitation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_lab_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lab_group",
                    models.ForeignKey(
                        help_text="Lab group the invitation is for",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invitations",
                        to="ccc.labgroup",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("lab_group", "invited_email")},
            },
        ),
        migrations.CreateModel(
            name="ResourcePermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_object_id",
                    models.PositiveIntegerField(help_text="ID of the specific resource instance"),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("owner", "Owner"),
                            ("admin", "Administrator"),
                            ("editor", "Editor"),
                            ("viewer", "Viewer"),
                        ],
                        help_text="Level of access this user has",
                        max_length=20,
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who granted this permission",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource_content_type",
                    models.ForeignKey(
                        help_text="Type of resource this permission applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who has this permission",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resource_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["resource_content_type", "resource_object_id"],
                        name="ccc_resourc_resourc_3f6b59_idx",
                    ),
                    models.Index(fields=["user"], name="ccc_resourc_user_id_cc62ef_idx"),
                ],
                "unique_together": {("resource_content_type", "resource_object_id", "user")},
            },
        ),
        migrations.CreateModel(
            name="UserOrcidProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "orcid_id",
                    models.CharField(
                        help_text="ORCID identifier (e.g., 0000-0000-0000-0000)",
                        max_length=19,
                        unique=True,
                    ),
                ),
                (
                    "orcid_name",
                    models.CharField(
                        blank=True,
                        help_text="Full name from ORCID profile",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "orcid_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email from ORCID profile (if public)",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this ORCID link has been verified",
                    ),
                ),
                (
                    "linked_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this ORCID was linked to the user account",
                    ),
                ),
                (
                    "access_token",
                    models.TextField(
                        blank=True,
                        help_text="ORCID OAuth access token (encrypted)",
                        null=True,
                    ),
                ),
                (
                    "refresh_token",
                    models.TextField(
                        blank=True,
                        help_text="ORCID OAuth refresh token (encrypted)",
                        null=True,
                    ),
                ),
                (
                    "token_expires_at",
                    models.DateTimeField(blank=True, help_text="When the access token expires", null=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="User account linked to this ORCID profile",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orcid_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User ORCID Profile",
                "verbose_name_plural": "User ORCID Profiles",
                "indexes": [
                    models.Index(fields=["orcid_id"], name="ccc_userorc_orcid_i_b7931b_idx"),
                    models.Index(fields=["orcid_email"], name="ccc_userorc_orcid_e_e1661b_idx"),
                ],
            },
        ),
    ]
