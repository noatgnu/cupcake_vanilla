services:
  app:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile
    container_name: cupcake-vanilla-app
    env_file: []
    environment:
      - POSTGRES_NAME=cupcake_vanilla_db
      - POSTGRES_DB=cupcake_vanilla_db
      - POSTGRES_USER=cupcake_vanilla
      - POSTGRES_PASSWORD=cupcake_vanilla_pass
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - SECRET_KEY=${SECRET_KEY:-change-me}
      - DEBUG=False
      - ALLOWED_HOSTS=ccv.ome.quest,localhost,127.0.0.1
      - CORS_ORIGIN_WHITELIST=https://ccv.ome.quest,https://localhost,http://localhost:4200
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./media:/app/media/
    networks:
      - cupcake-vanilla-net

  nginx:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile-nginx-ccv
    container_name: cupcake-vanilla-nginx-ccv
    restart: always
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot-www:/var/www/certbot
      - ./media:/media:ro
    networks:
      - cupcake-vanilla-net

  certbot:
    image: certbot/certbot:latest
    container_name: cupcake-vanilla-certbot
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    networks:
      - cupcake-vanilla-net
    command: sh -c "trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --quiet --agree-tos; sleep 12h & wait $$!; done"

  db:
    image: postgres:15
    container_name: cupcake-vanilla-db
    restart: always
    environment:
      POSTGRES_PASSWORD: cupcake_vanilla_pass
      POSTGRES_USER: cupcake_vanilla
      POSTGRES_DB: cupcake_vanilla_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - cupcake-vanilla-net

  redis:
    image: redis:7-alpine
    container_name: cupcake-vanilla-redis
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - cupcake-vanilla-net

  generate-self-signed:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile-ssl
    volumes:
      - letsencrypt:/certs
    profiles:
      - tools
    environment:
      - DOMAIN=ccv.ome.quest
    command: >
      sh -c "
        echo 'Generating self-signed SSL certificates for ccv.ome.quest...'
        mkdir -p /certs/live/ccv.ome.quest
        openssl req -x509 -nodes -days 30 -newkey rsa:2048 \
          -keyout /certs/live/ccv.ome.quest/privkey.pem \
          -out /certs/live/ccv.ome.quest/fullchain.pem \
          -subj '/C=US/ST=Development/L=Development/O=CUPCAKE-Vanilla/OU=Development/CN=ccv.ome.quest' \
          -addext 'subjectAltName=DNS:ccv.ome.quest'
        cp /certs/live/ccv.ome.quest/fullchain.pem /certs/live/ccv.ome.quest/chain.pem
        mkdir -p /certs
        echo '# Self-signed dhparam - replace with certbot' > /certs/ssl-dhparams.pem
        echo '# Self-signed options - replace with certbot' > /certs/options-ssl-nginx.conf
        echo 'Self-signed certificates generated successfully for ccv.ome.quest!'
        ls -la /certs/live/ccv.ome.quest/
      "

  #nginx-test:
  #  image: nginx:latest
  #  container_name: cupcake-vanilla-nginx-test
  #  restart: always
  #  ports:
  #      - "80:80"
  #      - "443:443"
  #  networks:
  #      - cupcake-vanilla-net

volumes:
  postgres-data:
  letsencrypt:
  certbot-www:

networks:
  cupcake-vanilla-net:
