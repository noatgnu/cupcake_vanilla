# Generated by Django 5.2.6 on 2025-09-05 12:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ExternalContactDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("contact_method_alt_name", models.CharField(max_length=255)),
                (
                    "contact_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("address", "Address"),
                            ("other", "Other"),
                        ],
                        default="email",
                        max_length=20,
                    ),
                ),
                ("contact_value", models.TextField()),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalInstrumentJob",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("maintenance", "Maintenance"),
                            ("analysis", "Analysis"),
                            ("other", "Other"),
                        ],
                        default="analysis",
                        max_length=20,
                    ),
                ),
                ("job_name", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("submitted", "Submitted"),
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("in_progress", "In Progress"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("sample_number", models.IntegerField(blank=True, null=True)),
                (
                    "sample_type",
                    models.CharField(
                        choices=[
                            ("wcl", "Whole Cell Lysate"),
                            ("ip", "Immunoprecipitate"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                    ),
                ),
                ("injection_volume", models.FloatField(blank=True, null=True)),
                (
                    "injection_unit",
                    models.TextField(blank=True, default="uL", null=True),
                ),
                ("search_engine", models.TextField(blank=True, null=True)),
                ("search_engine_version", models.TextField(blank=True, null=True)),
                ("search_details", models.TextField(blank=True, null=True)),
                ("method", models.TextField(blank=True, null=True)),
                ("location", models.TextField(blank=True, null=True)),
                ("funder", models.TextField(blank=True, null=True)),
                ("cost_center", models.TextField(blank=True, null=True)),
                ("assigned", models.BooleanField(default=False)),
                (
                    "instrument_start_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When instrument started for this job",
                        null=True,
                    ),
                ),
                (
                    "instrument_end_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When instrument finished for this job",
                        null=True,
                    ),
                ),
                (
                    "personnel_start_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When personnel started working on this job",
                        null=True,
                    ),
                ),
                (
                    "personnel_end_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When personnel finished working on this job",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("submitted_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical instrument job",
                "verbose_name_plural": "historical instrument jobs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalInstrumentUsage",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("time_started", models.DateTimeField(blank=True, null=True)),
                ("time_ended", models.DateTimeField(blank=True, null=True)),
                (
                    "usage_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Total hours of usage for billing",
                        max_digits=10,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("approved", models.BooleanField(default=False)),
                ("maintenance", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical instrument usage",
                "verbose_name_plural": "historical instrument usages",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMaintenanceLog",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "maintenance_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When maintenance was performed",
                        null=True,
                    ),
                ),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("routine", "Routine"),
                            ("emergency", "Emergency"),
                            ("other", "Other"),
                        ],
                        default="routine",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("completed", "Completed"),
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("requested", "Requested"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "maintenance_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of maintenance performed",
                        null=True,
                    ),
                ),
                (
                    "maintenance_notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about the maintenance",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "is_template",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a maintenance template",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical maintenance log",
                "verbose_name_plural": "historical maintenance logs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalReagent",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("name", models.CharField(default="Unnamed Reagent", max_length=255)),
                ("unit", models.CharField(default="units", max_length=255)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical reagent",
                "verbose_name_plural": "historical reagents",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalReagentAction",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[("add", "Add"), ("reserve", "Reserve")],
                        default="add",
                        max_length=20,
                    ),
                ),
                ("quantity", models.FloatField(default=0)),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical reagent action",
                "verbose_name_plural": "historical reagent actions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalStorageObject",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "object_type",
                    models.CharField(
                        choices=[
                            ("shelf", "Shelf"),
                            ("box", "Box"),
                            ("fridge", "Fridge"),
                            ("freezer", "Freezer"),
                            ("room", "Room"),
                            ("building", "Building"),
                            ("floor", "Floor"),
                            ("other", "Other"),
                        ],
                        default="shelf",
                        max_length=20,
                    ),
                ),
                ("object_name", models.TextField(default="Unnamed Storage")),
                ("object_description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("can_delete", models.BooleanField(default=False)),
                ("png_base64", models.TextField(blank=True, null=True)),
                (
                    "is_vaulted",
                    models.BooleanField(
                        default=False,
                        help_text="True if this storage object is in a user's import vault",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical storage object",
                "verbose_name_plural": "historical storage objects",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalStoredReagent",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("quantity", models.FloatField(default=0.0)),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("png_base64", models.TextField(blank=True, null=True)),
                ("barcode", models.TextField(blank=True, null=True)),
                ("shareable", models.BooleanField(default=True)),
                ("access_all", models.BooleanField(default=False)),
                ("expiration_date", models.DateField(blank=True, null=True)),
                (
                    "low_stock_threshold",
                    models.FloatField(
                        blank=True,
                        help_text="Threshold quantity for low stock notifications",
                        null=True,
                    ),
                ),
                ("notify_on_low_stock", models.BooleanField(default=False)),
                ("last_notification_sent", models.DateTimeField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical stored reagent",
                "verbose_name_plural": "historical stored reagents",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSupportInformation",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                (
                    "vendor_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "manufacturer_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("serial_number", models.TextField(blank=True, null=True)),
                (
                    "maintenance_frequency_days",
                    models.IntegerField(blank=True, null=True),
                ),
                ("warranty_start_date", models.DateField(blank=True, null=True)),
                ("warranty_end_date", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical support information",
                "verbose_name_plural": "historical support informations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Instrument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("instrument_name", models.TextField(default="Unnamed Instrument")),
                ("instrument_description", models.TextField(blank=True, null=True)),
                ("image", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("enabled", models.BooleanField(default=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "max_days_ahead_pre_approval",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                (
                    "max_days_within_usage_pre_approval",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                (
                    "last_warranty_notification_sent",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "last_maintenance_notification_sent",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "days_before_warranty_notification",
                    models.IntegerField(blank=True, default=30, null=True),
                ),
                (
                    "days_before_maintenance_notification",
                    models.IntegerField(blank=True, default=14, null=True),
                ),
                ("accepts_bookings", models.BooleanField(default=True)),
                (
                    "is_vaulted",
                    models.BooleanField(
                        default=False,
                        help_text="True if this instrument is in a user's import vault",
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="InstrumentJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("maintenance", "Maintenance"),
                            ("analysis", "Analysis"),
                            ("other", "Other"),
                        ],
                        default="analysis",
                        max_length=20,
                    ),
                ),
                ("job_name", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("submitted", "Submitted"),
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("in_progress", "In Progress"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("sample_number", models.IntegerField(blank=True, null=True)),
                (
                    "sample_type",
                    models.CharField(
                        choices=[
                            ("wcl", "Whole Cell Lysate"),
                            ("ip", "Immunoprecipitate"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                    ),
                ),
                ("injection_volume", models.FloatField(blank=True, null=True)),
                (
                    "injection_unit",
                    models.TextField(blank=True, default="uL", null=True),
                ),
                ("search_engine", models.TextField(blank=True, null=True)),
                ("search_engine_version", models.TextField(blank=True, null=True)),
                ("search_details", models.TextField(blank=True, null=True)),
                ("method", models.TextField(blank=True, null=True)),
                ("location", models.TextField(blank=True, null=True)),
                ("funder", models.TextField(blank=True, null=True)),
                ("cost_center", models.TextField(blank=True, null=True)),
                ("assigned", models.BooleanField(default=False)),
                (
                    "instrument_start_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When instrument started for this job",
                        null=True,
                    ),
                ),
                (
                    "instrument_end_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When instrument finished for this job",
                        null=True,
                    ),
                ),
                (
                    "personnel_start_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When personnel started working on this job",
                        null=True,
                    ),
                ),
                (
                    "personnel_end_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When personnel finished working on this job",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("submitted_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="InstrumentUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time_started", models.DateTimeField(blank=True, null=True)),
                ("time_ended", models.DateTimeField(blank=True, null=True)),
                (
                    "usage_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Total hours of usage for billing",
                        max_digits=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("approved", models.BooleanField(default=False)),
                ("maintenance", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "maintenance_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When maintenance was performed",
                        null=True,
                    ),
                ),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("routine", "Routine"),
                            ("emergency", "Emergency"),
                            ("other", "Other"),
                        ],
                        default="routine",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("completed", "Completed"),
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("requested", "Requested"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "maintenance_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of maintenance performed",
                        null=True,
                    ),
                ),
                (
                    "maintenance_notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about the maintenance",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_template",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a maintenance template",
                    ),
                ),
            ],
            options={
                "ordering": ["-maintenance_date"],
            },
        ),
        migrations.CreateModel(
            name="Reagent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="Unnamed Reagent", max_length=255)),
                ("unit", models.CharField(default="units", max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ReagentAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[("add", "Add"), ("reserve", "Reserve")],
                        default="add",
                        max_length=20,
                    ),
                ),
                ("quantity", models.FloatField(default=0)),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ReagentSubscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notify_on_low_stock", models.BooleanField(default=True)),
                ("notify_on_expiry", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="StorageObject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "object_type",
                    models.CharField(
                        choices=[
                            ("shelf", "Shelf"),
                            ("box", "Box"),
                            ("fridge", "Fridge"),
                            ("freezer", "Freezer"),
                            ("room", "Room"),
                            ("building", "Building"),
                            ("floor", "Floor"),
                            ("other", "Other"),
                        ],
                        default="shelf",
                        max_length=20,
                    ),
                ),
                ("object_name", models.TextField(default="Unnamed Storage")),
                ("object_description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("can_delete", models.BooleanField(default=False)),
                ("png_base64", models.TextField(blank=True, null=True)),
                (
                    "is_vaulted",
                    models.BooleanField(
                        default=False,
                        help_text="True if this storage object is in a user's import vault",
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="StoredReagent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.FloatField(default=0.0)),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                ("png_base64", models.TextField(blank=True, null=True)),
                ("barcode", models.TextField(blank=True, null=True)),
                ("shareable", models.BooleanField(default=True)),
                ("access_all", models.BooleanField(default=False)),
                ("expiration_date", models.DateField(blank=True, null=True)),
                (
                    "low_stock_threshold",
                    models.FloatField(
                        blank=True,
                        help_text="Threshold quantity for low stock notifications",
                        null=True,
                    ),
                ),
                ("notify_on_low_stock", models.BooleanField(default=False)),
                ("last_notification_sent", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["reagent__name"],
            },
        ),
        migrations.CreateModel(
            name="SupportInformation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vendor_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "manufacturer_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("serial_number", models.TextField(blank=True, null=True)),
                (
                    "maintenance_frequency_days",
                    models.IntegerField(blank=True, null=True),
                ),
                ("warranty_start_date", models.DateField(blank=True, null=True)),
                ("warranty_end_date", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ExternalContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("contact_name", models.CharField(max_length=255)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="external_contact_details",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "contact_details",
                    models.ManyToManyField(
                        blank=True,
                        related_name="external_contact",
                        to="ccm.externalcontactdetails",
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalExternalContact",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("contact_name", models.CharField(max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical external contact",
                "verbose_name_plural": "historical external contacts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalExternalContactDetails",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("contact_method_alt_name", models.CharField(max_length=255)),
                (
                    "contact_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("address", "Address"),
                            ("other", "Other"),
                        ],
                        default="email",
                        max_length=20,
                    ),
                ),
                ("contact_value", models.TextField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical external contact details",
                "verbose_name_plural": "historical external contact detailss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalInstrument",
            fields=[
                (
                    "id",
                    models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID"),
                ),
                ("instrument_name", models.TextField(default="Unnamed Instrument")),
                ("instrument_description", models.TextField(blank=True, null=True)),
                ("image", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("enabled", models.BooleanField(default=True)),
                ("remote_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "max_days_ahead_pre_approval",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                (
                    "max_days_within_usage_pre_approval",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                (
                    "last_warranty_notification_sent",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "last_maintenance_notification_sent",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "days_before_warranty_notification",
                    models.IntegerField(blank=True, default=30, null=True),
                ),
                (
                    "days_before_maintenance_notification",
                    models.IntegerField(blank=True, default=14, null=True),
                ),
                ("accepts_bookings", models.BooleanField(default=True)),
                (
                    "is_vaulted",
                    models.BooleanField(
                        default=False,
                        help_text="True if this instrument is in a user's import vault",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical instrument",
                "verbose_name_plural": "historical instruments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
