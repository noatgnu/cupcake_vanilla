# Debian Buster i386 (32-bit) Dockerfile for CUPCAKE Vanilla
# Using Debian Buster as it's the last Debian with i386 support
FROM --platform=linux/386 python:3.11-bullseye

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV POETRY_VENV_IN_PROJECT=1
ENV POETRY_NO_INTERACTION=1
ENV POETRY_CACHE_DIR=/tmp/poetry_cache
ENV DEBIAN_FRONTEND=noninteractive

WORKDIR /app
RUN mkdir "/app/media"
RUN mkdir "/app/media/temp"
RUN mkdir "/app/staticfiles"

# Install Rust toolchain for i386 (required for some Python packages)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal && \
    source ~/.cargo/env && \
    rustup target add i686-unknown-linux-gnu && \
    rustc --version && cargo --version

# Set Rust environment variables
ENV PATH="/root/.cargo/bin:${PATH}"
ENV CARGO_HOME="/root/.cargo"
ENV RUSTUP_HOME="/root/.rustup"
ENV CARGO_BUILD_TARGET=i686-unknown-linux-gnu
ENV CC=gcc
ENV CXX=g++

# Install Poetry
RUN pip install --upgrade pip && pip install poetry
RUN poetry config virtualenvs.create false

# Copy application code
COPY . /app/

# Install dependencies and project with Rust support
RUN poetry lock

# Set additional environment variables for cryptography compilation
ENV CRYPTOGRAPHY_DONT_BUILD_RUST=0
ENV CARGO_NET_GIT_FETCH_WITH_CLI=true

# Install Python dependencies (Rust should be in PATH now)
RUN poetry install --only=main

# Collect static files
RUN python manage.py collectstatic --noinput

# Expose port
EXPOSE 8000

# Use gunicorn with uvicorn workers for ASGI support (WebSocket)
CMD ["gunicorn", \
     "--workers=2", \
     "--worker-class=uvicorn.workers.UvicornWorker", \
     "--bind=0.0.0.0:8000", \
     "--timeout=300", \
     "--keep-alive=2", \
     "--max-requests=1000", \
     "--max-requests-jitter=100", \
     "--preload", \
     "--log-level=info", \
     "--access-logfile=-", \
     "--error-logfile=-", \
     "cupcake_vanilla.asgi:application"]
